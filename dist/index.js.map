{
  "version": 3,
  "sources": ["../../node_modules/preact/src/constants.js", "../../node_modules/preact/src/util.js", "../../node_modules/preact/src/options.js", "../../node_modules/preact/src/create-element.js", "../../node_modules/preact/src/component.js", "../../node_modules/preact/src/create-context.js", "../../node_modules/preact/src/diff/children.js", "../../node_modules/preact/src/diff/props.js", "../../node_modules/preact/src/diff/index.js", "../../node_modules/preact/src/render.js", "../../node_modules/preact/src/clone-element.js", "../../node_modules/preact/src/diff/catch-error.js", "../../node_modules/preact/hooks/src/index.js", "../../src/index.jsx"],
  "sourcesContent": ["export const EMPTY_OBJ = {};\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n", "import { EMPTY_ARR } from \"./constants\";\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\t// @ts-ignore We change the type of `obj` to be `O & P`\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {Node} node The node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\nexport const slice = EMPTY_ARR.slice;\n", "import { _catchError } from './diff/catch-error';\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {import('./internal').Options}\n */\nconst options = {\n\t_catchError\n};\n\nexport default options;\n", "import { slice } from './util';\nimport options from './options';\n\nlet vnodeId = 0;\n\n/**\n * Create an virtual node (used for JSX)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * constructor for this virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the virtual node\n * @returns {import('./internal').VNode}\n */\nexport function createElement(type, props, children) {\n\tlet normalizedProps = {},\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\t// If a Component VNode, check for and apply defaultProps\n\t// Note: type may be undefined in development, must never error here.\n\tif (typeof type == 'function' && type.defaultProps != null) {\n\t\tfor (i in type.defaultProps) {\n\t\t\tif (normalizedProps[i] === undefined) {\n\t\t\t\tnormalizedProps[i] = type.defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {import('./internal').VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {import('./internal').VNode}\n */\nexport function createVNode(type, props, key, ref, original) {\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n\t// Do not inline into createElement and coerceToVNode!\n\tconst vnode = {\n\t\ttype,\n\t\tprops,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t// _nextDom must be initialized to undefined b/c it will eventually\n\t\t// be set to dom.nextSibling which can return `null` and it is important\n\t\t// to be able to distinguish between an uninitialized _nextDom and\n\t\t// a _nextDom that has been set to `null`\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\t_hydrating: null,\n\t\tconstructor: undefined,\n\t\t_original: original == null ? ++vnodeId : original\n\t};\n\n\t// Only invoke the vnode hook if this was *not* a direct copy:\n\tif (original == null && options.vnode != null) options.vnode(vnode);\n\n\treturn vnode;\n}\n\nexport function createRef() {\n\treturn { current: null };\n}\n\nexport function Fragment(props) {\n\treturn props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is import('./internal').VNode}\n */\nexport const isValidElement = vnode =>\n\tvnode != null && vnode.constructor === undefined;\n", "import { assign } from './util';\nimport { diff, commitRoot } from './diff/index';\nimport options from './options';\nimport { Fragment } from './create-element';\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nexport function Component(props, context) {\n\tthis.props = props;\n\tthis.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {import('./internal').Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nComponent.prototype.setState = function(update, callback) {\n\t// only clone state when copying to nextState the first time.\n\tlet s;\n\tif (this._nextState != null && this._nextState !== this.state) {\n\t\ts = this._nextState;\n\t} else {\n\t\ts = this._nextState = assign({}, this.state);\n\t}\n\n\tif (typeof update == 'function') {\n\t\t// Some libraries like `immer` mark the current state as readonly,\n\t\t// preventing us from mutating it, so we need to clone it. See #2716\n\t\tupdate = update(assign({}, s), this.props);\n\t}\n\n\tif (update) {\n\t\tassign(s, update);\n\t}\n\n\t// Skip update if updater function returned null\n\tif (update == null) return;\n\n\tif (this._vnode) {\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {import('./internal').Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nComponent.prototype.forceUpdate = function(callback) {\n\tif (this._vnode) {\n\t\t// Set render mode so that we can differentiate where the render request\n\t\t// is coming from. We need this because forceUpdate should never call\n\t\t// shouldComponentUpdate\n\t\tthis._force = true;\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {import('./index').ComponentChildren | void}\n */\nComponent.prototype.render = Fragment;\n\n/**\n * @param {import('./internal').VNode} vnode\n * @param {number | null} [childIndex]\n */\nexport function getDomSibling(vnode, childIndex) {\n\tif (childIndex == null) {\n\t\t// Use childIndex==null as a signal to resume the search from the vnode's sibling\n\t\treturn vnode._parent\n\t\t\t? getDomSibling(vnode._parent, vnode._parent._children.indexOf(vnode) + 1)\n\t\t\t: null;\n\t}\n\n\tlet sibling;\n\tfor (; childIndex < vnode._children.length; childIndex++) {\n\t\tsibling = vnode._children[childIndex];\n\n\t\tif (sibling != null && sibling._dom != null) {\n\t\t\t// Since updateParentDomPointers keeps _dom pointer correct,\n\t\t\t// we can rely on _dom to tell us if this subtree contains a\n\t\t\t// rendered DOM node, and what the first rendered DOM node is\n\t\t\treturn sibling._dom;\n\t\t}\n\t}\n\n\t// If we get here, we have not found a DOM node in this vnode's children.\n\t// We must resume from this vnode's sibling (in it's parent _children array)\n\t// Only climb up and search the parent if we aren't searching through a DOM\n\t// VNode (meaning we reached the DOM parent of the original vnode that began\n\t// the search)\n\treturn typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {import('./internal').Component} component The component to rerender\n */\nfunction renderComponent(component) {\n\tlet vnode = component._vnode,\n\t\toldDom = vnode._dom,\n\t\tparentDom = component._parentDom;\n\n\tif (parentDom) {\n\t\tlet commitQueue = [];\n\t\tconst oldVNode = assign({}, vnode);\n\t\toldVNode._original = vnode._original + 1;\n\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tvnode,\n\t\t\toldVNode,\n\t\t\tcomponent._globalContext,\n\t\t\tparentDom.ownerSVGElement !== undefined,\n\t\t\tvnode._hydrating != null ? [oldDom] : null,\n\t\t\tcommitQueue,\n\t\t\toldDom == null ? getDomSibling(vnode) : oldDom,\n\t\t\tvnode._hydrating\n\t\t);\n\t\tcommitRoot(commitQueue, vnode);\n\n\t\tif (vnode._dom != oldDom) {\n\t\t\tupdateParentDomPointers(vnode);\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./internal').VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n\tif ((vnode = vnode._parent) != null && vnode._component != null) {\n\t\tvnode._dom = vnode._component.base = null;\n\t\tfor (let i = 0; i < vnode._children.length; i++) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child != null && child._dom != null) {\n\t\t\t\tvnode._dom = vnode._component.base = child._dom;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn updateParentDomPointers(vnode);\n\t}\n}\n\n/**\n * The render queue\n * @type {Array<import('./internal').Component>}\n */\nlet rerenderQueue = [];\n\n/**\n * Asynchronously schedule a callback\n * @type {(cb: () => void) => void}\n */\n/* istanbul ignore next */\n// Note the following line isn't tree-shaken by rollup cuz of rollup/rollup#2566\nconst defer =\n\ttypeof Promise == 'function'\n\t\t? Promise.prototype.then.bind(Promise.resolve())\n\t\t: setTimeout;\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nlet prevDebounce;\n\n/**\n * Enqueue a rerender of a component\n * @param {import('./internal').Component} c The component to rerender\n */\nexport function enqueueRender(c) {\n\tif (\n\t\t(!c._dirty &&\n\t\t\t(c._dirty = true) &&\n\t\t\trerenderQueue.push(c) &&\n\t\t\t!process._rerenderCount++) ||\n\t\tprevDebounce !== options.debounceRendering\n\t) {\n\t\tprevDebounce = options.debounceRendering;\n\t\t(prevDebounce || defer)(process);\n\t}\n}\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n\tlet queue;\n\twhile ((process._rerenderCount = rerenderQueue.length)) {\n\t\tqueue = rerenderQueue.sort((a, b) => a._vnode._depth - b._vnode._depth);\n\t\trerenderQueue = [];\n\t\t// Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n\t\t// process() calls from getting scheduled while `queue` is still being consumed.\n\t\tqueue.some(c => {\n\t\t\tif (c._dirty) renderComponent(c);\n\t\t});\n\t}\n}\nprocess._rerenderCount = 0;\n", "import { enqueueRender } from './component';\n\nexport let i = 0;\n\nexport function createContext(defaultValue, contextId) {\n\tcontextId = '__cC' + i++;\n\n\tconst context = {\n\t\t_id: contextId,\n\t\t_defaultValue: defaultValue,\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tConsumer(props, contextValue) {\n\t\t\t// return props.children(\n\t\t\t// \tcontext[contextId] ? context[contextId].props.value : defaultValue\n\t\t\t// );\n\t\t\treturn props.children(contextValue);\n\t\t},\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tProvider(props) {\n\t\t\tif (!this.getChildContext) {\n\t\t\t\tlet subs = [];\n\t\t\t\tlet ctx = {};\n\t\t\t\tctx[contextId] = this;\n\n\t\t\t\tthis.getChildContext = () => ctx;\n\n\t\t\t\tthis.shouldComponentUpdate = function(_props) {\n\t\t\t\t\tif (this.props.value !== _props.value) {\n\t\t\t\t\t\t// I think the forced value propagation here was only needed when `options.debounceRendering` was being bypassed:\n\t\t\t\t\t\t// https://github.com/preactjs/preact/commit/4d339fb803bea09e9f198abf38ca1bf8ea4b7771#diff-54682ce380935a717e41b8bfc54737f6R358\n\t\t\t\t\t\t// In those cases though, even with the value corrected, we're double-rendering all nodes.\n\t\t\t\t\t\t// It might be better to just tell folks not to use force-sync mode.\n\t\t\t\t\t\t// Currently, using `useContext()` in a class component will overwrite its `this.context` value.\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context[contextId] = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\t\t\t\t\t\tsubs.some(enqueueRender);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.sub = c => {\n\t\t\t\t\tsubs.push(c);\n\t\t\t\t\tlet old = c.componentWillUnmount;\n\t\t\t\t\tc.componentWillUnmount = () => {\n\t\t\t\t\t\tsubs.splice(subs.indexOf(c), 1);\n\t\t\t\t\t\tif (old) old.call(c);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn props.children;\n\t\t}\n\t};\n\n\t// Devtools needs access to the context object when it\n\t// encounters a Provider. This is necessary to support\n\t// setting `displayName` on the context object instead\n\t// of on the component itself. See:\n\t// https://reactjs.org/docs/context.html#contextdisplayname\n\n\treturn (context.Provider._contextRef = context.Consumer.contextType = context);\n}\n", "import { diff, unmount, applyRef } from './index';\nimport { createVNode, Fragment } from '../create-element';\nimport { EMPTY_OBJ, EMPTY_ARR } from '../constants';\nimport { getDomSibling } from '../component';\n\n/**\n * Diff the children of a virtual node\n * @param {import('../internal').PreactElement} parentDom The DOM element whose\n * children are being diffed\n * @param {import('../internal').ComponentChildren[]} renderResult\n * @param {import('../internal').VNode} newParentVNode The new virtual\n * node whose children should be diff'ed against oldParentVNode\n * @param {import('../internal').VNode} oldParentVNode The old virtual\n * node whose children should be diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by getChildContext\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n */\nexport function diffChildren(\n\tparentDom,\n\trenderResult,\n\tnewParentVNode,\n\toldParentVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet i, j, oldVNode, childVNode, newDom, firstChildDom, refs;\n\n\t// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n\t// as EMPTY_OBJ._children should be `undefined`.\n\tlet oldChildren = (oldParentVNode && oldParentVNode._children) || EMPTY_ARR;\n\n\tlet oldChildrenLength = oldChildren.length;\n\n\tnewParentVNode._children = [];\n\tfor (i = 0; i < renderResult.length; i++) {\n\t\tchildVNode = renderResult[i];\n\n\t\tif (childVNode == null || typeof childVNode == 'boolean') {\n\t\t\tchildVNode = newParentVNode._children[i] = null;\n\t\t}\n\t\t// If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n\t\t// or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n\t\t// it's own DOM & etc. pointers\n\t\telse if (\n\t\t\ttypeof childVNode == 'string' ||\n\t\t\ttypeof childVNode == 'number' ||\n\t\t\t// eslint-disable-next-line valid-typeof\n\t\t\ttypeof childVNode == 'bigint'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tnull,\n\t\t\t\tchildVNode,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tchildVNode\n\t\t\t);\n\t\t} else if (Array.isArray(childVNode)) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tFragment,\n\t\t\t\t{ children: childVNode },\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (childVNode._depth > 0) {\n\t\t\t// VNode is already in use, clone it. This can happen in the following\n\t\t\t// scenario:\n\t\t\t//   const reuse = <div />\n\t\t\t//   <div>{reuse}<span />{reuse}</div>\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tchildVNode.type,\n\t\t\t\tchildVNode.props,\n\t\t\t\tchildVNode.key,\n\t\t\t\tnull,\n\t\t\t\tchildVNode._original\n\t\t\t);\n\t\t} else {\n\t\t\tchildVNode = newParentVNode._children[i] = childVNode;\n\t\t}\n\n\t\t// Terser removes the `continue` here and wraps the loop body\n\t\t// in a `if (childVNode) { ... } condition\n\t\tif (childVNode == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tchildVNode._parent = newParentVNode;\n\t\tchildVNode._depth = newParentVNode._depth + 1;\n\n\t\t// Check if we find a corresponding element in oldChildren.\n\t\t// If found, delete the array item by setting to `undefined`.\n\t\t// We use `undefined`, as `null` is reserved for empty placeholders\n\t\t// (holes).\n\t\toldVNode = oldChildren[i];\n\n\t\tif (\n\t\t\toldVNode === null ||\n\t\t\t(oldVNode &&\n\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\tchildVNode.type === oldVNode.type)\n\t\t) {\n\t\t\toldChildren[i] = undefined;\n\t\t} else {\n\t\t\t// Either oldVNode === undefined or oldChildrenLength > 0,\n\t\t\t// so after this loop oldVNode == null or oldVNode is a valid value.\n\t\t\tfor (j = 0; j < oldChildrenLength; j++) {\n\t\t\t\toldVNode = oldChildren[j];\n\t\t\t\t// If childVNode is unkeyed, we only match similarly unkeyed nodes, otherwise we match by key.\n\t\t\t\t// We always match by type (in either case).\n\t\t\t\tif (\n\t\t\t\t\toldVNode &&\n\t\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\t\tchildVNode.type === oldVNode.type\n\t\t\t\t) {\n\t\t\t\t\toldChildren[j] = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\toldVNode = null;\n\t\t\t}\n\t\t}\n\n\t\toldVNode = oldVNode || EMPTY_OBJ;\n\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tchildVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tisSvg,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\toldDom,\n\t\t\tisHydrating\n\t\t);\n\n\t\tnewDom = childVNode._dom;\n\n\t\tif ((j = childVNode.ref) && oldVNode.ref != j) {\n\t\t\tif (!refs) refs = [];\n\t\t\tif (oldVNode.ref) refs.push(oldVNode.ref, null, childVNode);\n\t\t\trefs.push(j, childVNode._component || newDom, childVNode);\n\t\t}\n\n\t\tif (newDom != null) {\n\t\t\tif (firstChildDom == null) {\n\t\t\t\tfirstChildDom = newDom;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttypeof childVNode.type == 'function' &&\n\t\t\t\tchildVNode._children === oldVNode._children\n\t\t\t) {\n\t\t\t\tchildVNode._nextDom = oldDom = reorderChildren(\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldDom,\n\t\t\t\t\tparentDom\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(\n\t\t\t\t\tparentDom,\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldVNode,\n\t\t\t\t\toldChildren,\n\t\t\t\t\tnewDom,\n\t\t\t\t\toldDom\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (typeof newParentVNode.type == 'function') {\n\t\t\t\t// Because the newParentVNode is Fragment-like, we need to set it's\n\t\t\t\t// _nextDom property to the nextSibling of its last child DOM node.\n\t\t\t\t//\n\t\t\t\t// `oldDom` contains the correct value here because if the last child\n\t\t\t\t// is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n\t\t\t\t// If the last child is a DOM VNode, then oldDom will be set to that DOM\n\t\t\t\t// node's nextSibling.\n\t\t\t\tnewParentVNode._nextDom = oldDom;\n\t\t\t}\n\t\t} else if (\n\t\t\toldDom &&\n\t\t\toldVNode._dom == oldDom &&\n\t\t\toldDom.parentNode != parentDom\n\t\t) {\n\t\t\t// The above condition is to handle null placeholders. See test in placeholder.test.js:\n\t\t\t// `efficiently replace null placeholders in parent rerenders`\n\t\t\toldDom = getDomSibling(oldVNode);\n\t\t}\n\t}\n\n\tnewParentVNode._dom = firstChildDom;\n\n\t// Remove remaining oldChildren if there are any.\n\tfor (i = oldChildrenLength; i--; ) {\n\t\tif (oldChildren[i] != null) {\n\t\t\tif (\n\t\t\t\ttypeof newParentVNode.type == 'function' &&\n\t\t\t\toldChildren[i]._dom != null &&\n\t\t\t\toldChildren[i]._dom == newParentVNode._nextDom\n\t\t\t) {\n\t\t\t\t// If the newParentVNode.__nextDom points to a dom node that is about to\n\t\t\t\t// be unmounted, then get the next sibling of that vnode and set\n\t\t\t\t// _nextDom to it\n\t\t\t\tnewParentVNode._nextDom = getDomSibling(oldParentVNode, i + 1);\n\t\t\t}\n\n\t\t\tunmount(oldChildren[i], oldChildren[i]);\n\t\t}\n\t}\n\n\t// Set refs only after unmount\n\tif (refs) {\n\t\tfor (i = 0; i < refs.length; i++) {\n\t\t\tapplyRef(refs[i], refs[++i], refs[++i]);\n\t\t}\n\t}\n}\n\nfunction reorderChildren(childVNode, oldDom, parentDom) {\n\t// Note: VNodes in nested suspended trees may be missing _children.\n\tlet c = childVNode._children;\n\tlet tmp = 0;\n\tfor (; c && tmp < c.length; tmp++) {\n\t\tlet vnode = c[tmp];\n\t\tif (vnode) {\n\t\t\t// We typically enter this code path on sCU bailout, where we copy\n\t\t\t// oldVNode._children to newVNode._children. If that is the case, we need\n\t\t\t// to update the old children's _parent pointer to point to the newVNode\n\t\t\t// (childVNode here).\n\t\t\tvnode._parent = childVNode;\n\n\t\t\tif (typeof vnode.type == 'function') {\n\t\t\t\toldDom = reorderChildren(vnode, oldDom, parentDom);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(\n\t\t\t\t\tparentDom,\n\t\t\t\t\tvnode,\n\t\t\t\t\tvnode,\n\t\t\t\t\tc,\n\t\t\t\t\tvnode._dom,\n\t\t\t\t\toldDom\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {import('../index').ComponentChildren} children The unflattened\n * children of a virtual node\n * @returns {import('../internal').VNode[]}\n */\nexport function toChildArray(children, out) {\n\tout = out || [];\n\tif (children == null || typeof children == 'boolean') {\n\t} else if (Array.isArray(children)) {\n\t\tchildren.some(child => {\n\t\t\ttoChildArray(child, out);\n\t\t});\n\t} else {\n\t\tout.push(children);\n\t}\n\treturn out;\n}\n\nfunction placeChild(\n\tparentDom,\n\tchildVNode,\n\toldVNode,\n\toldChildren,\n\tnewDom,\n\toldDom\n) {\n\tlet nextDom;\n\tif (childVNode._nextDom !== undefined) {\n\t\t// Only Fragments or components that return Fragment like VNodes will\n\t\t// have a non-undefined _nextDom. Continue the diff from the sibling\n\t\t// of last DOM child of this child VNode\n\t\tnextDom = childVNode._nextDom;\n\n\t\t// Eagerly cleanup _nextDom. We don't need to persist the value because\n\t\t// it is only used by `diffChildren` to determine where to resume the diff after\n\t\t// diffing Components and Fragments. Once we store it the nextDOM local var, we\n\t\t// can clean up the property\n\t\tchildVNode._nextDom = undefined;\n\t} else if (\n\t\toldVNode == null ||\n\t\tnewDom != oldDom ||\n\t\tnewDom.parentNode == null\n\t) {\n\t\touter: if (oldDom == null || oldDom.parentNode !== parentDom) {\n\t\t\tparentDom.appendChild(newDom);\n\t\t\tnextDom = null;\n\t\t} else {\n\t\t\t// `j<oldChildrenLength; j+=2` is an alternative to `j++<oldChildrenLength/2`\n\t\t\tfor (\n\t\t\t\tlet sibDom = oldDom, j = 0;\n\t\t\t\t(sibDom = sibDom.nextSibling) && j < oldChildren.length;\n\t\t\t\tj += 2\n\t\t\t) {\n\t\t\t\tif (sibDom == newDom) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tparentDom.insertBefore(newDom, oldDom);\n\t\t\tnextDom = oldDom;\n\t\t}\n\t}\n\n\t// If we have pre-calculated the nextDOM node, use it. Else calculate it now\n\t// Strictly check for `undefined` here cuz `null` is a valid value of `nextDom`.\n\t// See more detail in create-element.js:createVNode\n\tif (nextDom !== undefined) {\n\t\toldDom = nextDom;\n\t} else {\n\t\toldDom = newDom.nextSibling;\n\t}\n\n\treturn oldDom;\n}\n", "import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n/**\n * Diff the old and new properties of a VNode and apply changes to the DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to apply\n * changes to\n * @param {object} newProps The new props\n * @param {object} oldProps The old props\n * @param {boolean} isSvg Whether or not this node is an SVG node\n * @param {boolean} hydrate Whether or not we are in hydration mode\n */\nexport function diffProps(dom, newProps, oldProps, isSvg, hydrate) {\n\tlet i;\n\n\tfor (i in oldProps) {\n\t\tif (i !== 'children' && i !== 'key' && !(i in newProps)) {\n\t\t\tsetProperty(dom, i, null, oldProps[i], isSvg);\n\t\t}\n\t}\n\n\tfor (i in newProps) {\n\t\tif (\n\t\t\t(!hydrate || typeof newProps[i] == 'function') &&\n\t\t\ti !== 'children' &&\n\t\t\ti !== 'key' &&\n\t\t\ti !== 'value' &&\n\t\t\ti !== 'checked' &&\n\t\t\toldProps[i] !== newProps[i]\n\t\t) {\n\t\t\tsetProperty(dom, i, newProps[i], oldProps[i], isSvg);\n\t\t}\n\t}\n}\n\nfunction setStyle(style, key, value) {\n\tif (key[0] === '-') {\n\t\tstyle.setProperty(key, value);\n\t} else if (value == null) {\n\t\tstyle[key] = '';\n\t} else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n\t\tstyle[key] = value;\n\t} else {\n\t\tstyle[key] = value + 'px';\n\t}\n}\n\n/**\n * Set a property value on a DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node or not\n */\nexport function setProperty(dom, name, value, oldValue, isSvg) {\n\tlet useCapture;\n\n\to: if (name === 'style') {\n\t\tif (typeof value == 'string') {\n\t\t\tdom.style.cssText = value;\n\t\t} else {\n\t\t\tif (typeof oldValue == 'string') {\n\t\t\t\tdom.style.cssText = oldValue = '';\n\t\t\t}\n\n\t\t\tif (oldValue) {\n\t\t\t\tfor (name in oldValue) {\n\t\t\t\t\tif (!(value && name in value)) {\n\t\t\t\t\t\tsetStyle(dom.style, name, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tfor (name in value) {\n\t\t\t\t\tif (!oldValue || value[name] !== oldValue[name]) {\n\t\t\t\t\t\tsetStyle(dom.style, name, value[name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n\telse if (name[0] === 'o' && name[1] === 'n') {\n\t\tuseCapture = name !== (name = name.replace(/Capture$/, ''));\n\n\t\t// Infer correct casing for DOM built-in events:\n\t\tif (name.toLowerCase() in dom) name = name.toLowerCase().slice(2);\n\t\telse name = name.slice(2);\n\n\t\tif (!dom._listeners) dom._listeners = {};\n\t\tdom._listeners[name + useCapture] = value;\n\n\t\tif (value) {\n\t\t\tif (!oldValue) {\n\t\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\t\tdom.addEventListener(name, handler, useCapture);\n\t\t\t}\n\t\t} else {\n\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\tdom.removeEventListener(name, handler, useCapture);\n\t\t}\n\t} else if (name !== 'dangerouslySetInnerHTML') {\n\t\tif (isSvg) {\n\t\t\t// Normalize incorrect prop usage for SVG:\n\t\t\t// - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\n\t\t\t// - className --> class\n\t\t\tname = name.replace(/xlink[H:h]/, 'h').replace(/sName$/, 's');\n\t\t} else if (\n\t\t\tname !== 'href' &&\n\t\t\tname !== 'list' &&\n\t\t\tname !== 'form' &&\n\t\t\t// Default value in browsers is `-1` and an empty string is\n\t\t\t// cast to `0` instead\n\t\t\tname !== 'tabIndex' &&\n\t\t\tname !== 'download' &&\n\t\t\tname in dom\n\t\t) {\n\t\t\ttry {\n\t\t\t\tdom[name] = value == null ? '' : value;\n\t\t\t\t// labelled break is 1b smaller here than a return statement (sorry)\n\t\t\t\tbreak o;\n\t\t\t} catch (e) {}\n\t\t}\n\n\t\t// ARIA-attributes have a different notion of boolean values.\n\t\t// The value `false` is different from the attribute not\n\t\t// existing on the DOM, so we can't remove it. For non-boolean\n\t\t// ARIA-attributes we could treat false as a removal, but the\n\t\t// amount of exceptions would cost us too many bytes. On top of\n\t\t// that other VDOM frameworks also always stringify `false`.\n\n\t\tif (typeof value === 'function') {\n\t\t\t// never serialize functions as attribute values\n\t\t} else if (\n\t\t\tvalue != null &&\n\t\t\t(value !== false || (name[0] === 'a' && name[1] === 'r'))\n\t\t) {\n\t\t\tdom.setAttribute(name, value);\n\t\t} else {\n\t\t\tdom.removeAttribute(name);\n\t\t}\n\t}\n}\n\n/**\n * Proxy an event to hooked event handlers\n * @param {Event} e The event object from the browser\n * @private\n */\nfunction eventProxy(e) {\n\tthis._listeners[e.type + false](options.event ? options.event(e) : e);\n}\n\nfunction eventProxyCapture(e) {\n\tthis._listeners[e.type + true](options.event ? options.event(e) : e);\n}\n", "import { EMPTY_OBJ } from '../constants';\nimport { Component, getDomSibling } from '../component';\nimport { Fragment } from '../create-element';\nimport { diffChildren } from './children';\nimport { diffProps, setProperty } from './props';\nimport { assign, removeNode, slice } from '../util';\nimport options from '../options';\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {import('../internal').PreactElement} parentDom The parent of the DOM element\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by getChildContext\n * @param {boolean} isSvg Whether or not this element is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} [isHydrating] Whether or not we are in hydration\n */\nexport function diff(\n\tparentDom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet tmp,\n\t\tnewType = newVNode.type;\n\n\t// When passing through createElement it assigns the object\n\t// constructor as undefined. This to prevent JSON-injection.\n\tif (newVNode.constructor !== undefined) return null;\n\n\t// If the previous diff bailed out, resume creating/hydrating.\n\tif (oldVNode._hydrating != null) {\n\t\tisHydrating = oldVNode._hydrating;\n\t\toldDom = newVNode._dom = oldVNode._dom;\n\t\t// if we resume, we want the tree to be \"unlocked\"\n\t\tnewVNode._hydrating = null;\n\t\texcessDomChildren = [oldDom];\n\t}\n\n\tif ((tmp = options._diff)) tmp(newVNode);\n\n\ttry {\n\t\touter: if (typeof newType == 'function') {\n\t\t\tlet c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n\t\t\tlet newProps = newVNode.props;\n\n\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t// the context value as `this.context` just for this component.\n\t\t\ttmp = newType.contextType;\n\t\t\tlet provider = tmp && globalContext[tmp._id];\n\t\t\tlet componentContext = tmp\n\t\t\t\t? provider\n\t\t\t\t\t? provider.props.value\n\t\t\t\t\t: tmp._defaultValue\n\t\t\t\t: globalContext;\n\n\t\t\t// Get component and set it to `c`\n\t\t\tif (oldVNode._component) {\n\t\t\t\tc = newVNode._component = oldVNode._component;\n\t\t\t\tclearProcessingException = c._processingException = c._pendingError;\n\t\t\t} else {\n\t\t\t\t// Instantiate the new component\n\t\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\t\t// @ts-ignore The check above verifies that newType is suppose to be constructed\n\t\t\t\t\tnewVNode._component = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-ignore Trust me, Component implements the interface we want\n\t\t\t\t\tnewVNode._component = c = new Component(newProps, componentContext);\n\t\t\t\t\tc.constructor = newType;\n\t\t\t\t\tc.render = doRender;\n\t\t\t\t}\n\t\t\t\tif (provider) provider.sub(c);\n\n\t\t\t\tc.props = newProps;\n\t\t\t\tif (!c.state) c.state = {};\n\t\t\t\tc.context = componentContext;\n\t\t\t\tc._globalContext = globalContext;\n\t\t\t\tisNew = c._dirty = true;\n\t\t\t\tc._renderCallbacks = [];\n\t\t\t}\n\n\t\t\t// Invoke getDerivedStateFromProps\n\t\t\tif (c._nextState == null) {\n\t\t\t\tc._nextState = c.state;\n\t\t\t}\n\t\t\tif (newType.getDerivedStateFromProps != null) {\n\t\t\t\tif (c._nextState == c.state) {\n\t\t\t\t\tc._nextState = assign({}, c._nextState);\n\t\t\t\t}\n\n\t\t\t\tassign(\n\t\t\t\t\tc._nextState,\n\t\t\t\t\tnewType.getDerivedStateFromProps(newProps, c._nextState)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\toldProps = c.props;\n\t\t\toldState = c.state;\n\n\t\t\t// Invoke pre-render lifecycle methods\n\t\t\tif (isNew) {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tc.componentWillMount != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillMount();\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidMount != null) {\n\t\t\t\t\tc._renderCallbacks.push(c.componentDidMount);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tnewProps !== oldProps &&\n\t\t\t\t\tc.componentWillReceiveProps != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillReceiveProps(newProps, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t(!c._force &&\n\t\t\t\t\t\tc.shouldComponentUpdate != null &&\n\t\t\t\t\t\tc.shouldComponentUpdate(\n\t\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\t\tc._nextState,\n\t\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t\t) === false) ||\n\t\t\t\t\tnewVNode._original === oldVNode._original\n\t\t\t\t) {\n\t\t\t\t\tc.props = newProps;\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t\t// More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n\t\t\t\t\tif (newVNode._original !== oldVNode._original) c._dirty = false;\n\t\t\t\t\tc._vnode = newVNode;\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t\tnewVNode._children.forEach(vnode => {\n\t\t\t\t\t\tif (vnode) vnode._parent = newVNode;\n\t\t\t\t\t});\n\t\t\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\t\t\tcommitQueue.push(c);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\n\t\t\t\tif (c.componentWillUpdate != null) {\n\t\t\t\t\tc.componentWillUpdate(newProps, c._nextState, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidUpdate != null) {\n\t\t\t\t\tc._renderCallbacks.push(() => {\n\t\t\t\t\t\tc.componentDidUpdate(oldProps, oldState, snapshot);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.context = componentContext;\n\t\t\tc.props = newProps;\n\t\t\tc.state = c._nextState;\n\n\t\t\tif ((tmp = options._render)) tmp(newVNode);\n\n\t\t\tc._dirty = false;\n\t\t\tc._vnode = newVNode;\n\t\t\tc._parentDom = parentDom;\n\n\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t// Handle setState called in render, see #2553\n\t\t\tc.state = c._nextState;\n\n\t\t\tif (c.getChildContext != null) {\n\t\t\t\tglobalContext = assign(assign({}, globalContext), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (!isNew && c.getSnapshotBeforeUpdate != null) {\n\t\t\t\tsnapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n\t\t\t}\n\n\t\t\tlet isTopLevelFragment =\n\t\t\t\ttmp != null && tmp.type === Fragment && tmp.key == null;\n\t\t\tlet renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n\n\t\t\tdiffChildren(\n\t\t\t\tparentDom,\n\t\t\t\tArray.isArray(renderResult) ? renderResult : [renderResult],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\toldDom,\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\tc.base = newVNode._dom;\n\n\t\t\t// We successfully rendered this VNode, unset any stored hydration/bailout state:\n\t\t\tnewVNode._hydrating = null;\n\n\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\tcommitQueue.push(c);\n\t\t\t}\n\n\t\t\tif (clearProcessingException) {\n\t\t\t\tc._pendingError = c._processingException = null;\n\t\t\t}\n\n\t\t\tc._force = false;\n\t\t} else if (\n\t\t\texcessDomChildren == null &&\n\t\t\tnewVNode._original === oldVNode._original\n\t\t) {\n\t\t\tnewVNode._children = oldVNode._children;\n\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t} else {\n\t\t\tnewVNode._dom = diffElementNodes(\n\t\t\t\toldVNode._dom,\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\tisHydrating\n\t\t\t);\n\t\t}\n\n\t\tif ((tmp = options.diffed)) tmp(newVNode);\n\t} catch (e) {\n\t\tnewVNode._original = null;\n\t\t// if hydrating or creating initial tree, bailout preserves DOM:\n\t\tif (isHydrating || excessDomChildren != null) {\n\t\t\tnewVNode._dom = oldDom;\n\t\t\tnewVNode._hydrating = !!isHydrating;\n\t\t\texcessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n\t\t\t// ^ could possibly be simplified to:\n\t\t\t// excessDomChildren.length = 0;\n\t\t}\n\t\toptions._catchError(e, newVNode, oldVNode);\n\t}\n}\n\n/**\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').VNode} root\n */\nexport function commitRoot(commitQueue, root) {\n\tif (options._commit) options._commit(root, commitQueue);\n\n\tcommitQueue.some(c => {\n\t\ttry {\n\t\t\t// @ts-ignore Reuse the commitQueue variable here so the type changes\n\t\t\tcommitQueue = c._renderCallbacks;\n\t\t\tc._renderCallbacks = [];\n\t\t\tcommitQueue.some(cb => {\n\t\t\t\t// @ts-ignore See above ts-ignore on commitQueue\n\t\t\t\tcb.call(c);\n\t\t\t});\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t});\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {import('../internal').PreactElement} dom The DOM element representing\n * the virtual nodes being diffed\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {*} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @returns {import('../internal').PreactElement}\n */\nfunction diffElementNodes(\n\tdom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\tisHydrating\n) {\n\tlet oldProps = oldVNode.props;\n\tlet newProps = newVNode.props;\n\tlet nodeType = newVNode.type;\n\tlet i = 0;\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tif (nodeType === 'svg') isSvg = true;\n\n\tif (excessDomChildren != null) {\n\t\tfor (; i < excessDomChildren.length; i++) {\n\t\t\tconst child = excessDomChildren[i];\n\n\t\t\t// if newVNode matches an element in excessDomChildren or the `dom`\n\t\t\t// argument matches an element in excessDomChildren, remove it from\n\t\t\t// excessDomChildren so it isn't later removed in diffChildren\n\t\t\tif (\n\t\t\t\tchild &&\n\t\t\t\t'setAttribute' in child === !!nodeType &&\n\t\t\t\t(nodeType ? child.localName === nodeType : child.nodeType === 3)\n\t\t\t) {\n\t\t\t\tdom = child;\n\t\t\t\texcessDomChildren[i] = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (dom == null) {\n\t\tif (nodeType === null) {\n\t\t\t// @ts-ignore createTextNode returns Text, we expect PreactElement\n\t\t\treturn document.createTextNode(newProps);\n\t\t}\n\n\t\tif (isSvg) {\n\t\t\tdom = document.createElementNS(\n\t\t\t\t'http://www.w3.org/2000/svg',\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType\n\t\t\t);\n\t\t} else {\n\t\t\tdom = document.createElement(\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType,\n\t\t\t\tnewProps.is && newProps\n\t\t\t);\n\t\t}\n\n\t\t// we created a new parent, so none of the previously attached children can be reused:\n\t\texcessDomChildren = null;\n\t\t// we are creating a new node, so we can assume this is a new subtree (in case we are hydrating), this deopts the hydrate\n\t\tisHydrating = false;\n\t}\n\n\tif (nodeType === null) {\n\t\t// During hydration, we still have to split merged text from SSR'd HTML.\n\t\tif (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n\t\t\tdom.data = newProps;\n\t\t}\n\t} else {\n\t\t// If excessDomChildren was not null, repopulate it with the current element's children:\n\t\texcessDomChildren = excessDomChildren && slice.call(dom.childNodes);\n\n\t\toldProps = oldVNode.props || EMPTY_OBJ;\n\n\t\tlet oldHtml = oldProps.dangerouslySetInnerHTML;\n\t\tlet newHtml = newProps.dangerouslySetInnerHTML;\n\n\t\t// During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n\t\t// @TODO we should warn in debug mode when props don't match here.\n\t\tif (!isHydrating) {\n\t\t\t// But, if we are in a situation where we are using existing DOM (e.g. replaceNode)\n\t\t\t// we should read the existing DOM attributes to diff them\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\toldProps = {};\n\t\t\t\tfor (i = 0; i < dom.attributes.length; i++) {\n\t\t\t\t\toldProps[dom.attributes[i].name] = dom.attributes[i].value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newHtml || oldHtml) {\n\t\t\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\n\t\t\t\tif (\n\t\t\t\t\t!newHtml ||\n\t\t\t\t\t((!oldHtml || newHtml.__html != oldHtml.__html) &&\n\t\t\t\t\t\tnewHtml.__html !== dom.innerHTML)\n\t\t\t\t) {\n\t\t\t\t\tdom.innerHTML = (newHtml && newHtml.__html) || '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdiffProps(dom, newProps, oldProps, isSvg, isHydrating);\n\n\t\t// If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n\t\tif (newHtml) {\n\t\t\tnewVNode._children = [];\n\t\t} else {\n\t\t\ti = newVNode.props.children;\n\t\t\tdiffChildren(\n\t\t\t\tdom,\n\t\t\t\tArray.isArray(i) ? i : [i],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg && nodeType !== 'foreignObject',\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\texcessDomChildren\n\t\t\t\t\t? excessDomChildren[0]\n\t\t\t\t\t: oldVNode._children && getDomSibling(oldVNode, 0),\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\t// Remove children that are not part of any vnode.\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\tfor (i = excessDomChildren.length; i--; ) {\n\t\t\t\t\tif (excessDomChildren[i] != null) removeNode(excessDomChildren[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (as above, don't diff props during hydration)\n\t\tif (!isHydrating) {\n\t\t\tif (\n\t\t\t\t'value' in newProps &&\n\t\t\t\t(i = newProps.value) !== undefined &&\n\t\t\t\t// #2756 For the <progress>-element the initial value is 0,\n\t\t\t\t// despite the attribute not being present. When the attribute\n\t\t\t\t// is missing the progress bar is treated as indeterminate.\n\t\t\t\t// To fix that we'll always update it when it is 0 for progress elements\n\t\t\t\t(i !== dom.value ||\n\t\t\t\t\t(nodeType === 'progress' && !i) ||\n\t\t\t\t\t// This is only for IE 11 to fix <select> value not being updated.\n\t\t\t\t\t// To avoid a stale select value we need to set the option.value\n\t\t\t\t\t// again, which triggers IE11 to re-evaluate the select value\n\t\t\t\t\t(nodeType === 'option' && i !== oldProps.value))\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'value', i, oldProps.value, false);\n\t\t\t}\n\t\t\tif (\n\t\t\t\t'checked' in newProps &&\n\t\t\t\t(i = newProps.checked) !== undefined &&\n\t\t\t\ti !== dom.checked\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'checked', i, oldProps.checked, false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {object|function} ref\n * @param {any} value\n * @param {import('../internal').VNode} vnode\n */\nexport function applyRef(ref, value, vnode) {\n\ttry {\n\t\tif (typeof ref == 'function') ref(value);\n\t\telse ref.current = value;\n\t} catch (e) {\n\t\toptions._catchError(e, vnode);\n\t}\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {import('../internal').VNode} vnode The virtual node to unmount\n * @param {import('../internal').VNode} parentVNode The parent of the VNode that\n * initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nexport function unmount(vnode, parentVNode, skipRemove) {\n\tlet r;\n\tif (options.unmount) options.unmount(vnode);\n\n\tif ((r = vnode.ref)) {\n\t\tif (!r.current || r.current === vnode._dom) applyRef(r, null, parentVNode);\n\t}\n\n\tif ((r = vnode._component) != null) {\n\t\tif (r.componentWillUnmount) {\n\t\t\ttry {\n\t\t\t\tr.componentWillUnmount();\n\t\t\t} catch (e) {\n\t\t\t\toptions._catchError(e, parentVNode);\n\t\t\t}\n\t\t}\n\n\t\tr.base = r._parentDom = null;\n\t}\n\n\tif ((r = vnode._children)) {\n\t\tfor (let i = 0; i < r.length; i++) {\n\t\t\tif (r[i]) {\n\t\t\t\tunmount(r[i], parentVNode, typeof vnode.type != 'function');\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!skipRemove && vnode._dom != null) removeNode(vnode._dom);\n\n\t// Must be set to `undefined` to properly clean up `_nextDom`\n\t// for which `null` is a valid value. See comment in `create-element.js`\n\tvnode._dom = vnode._nextDom = undefined;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n", "import { EMPTY_OBJ } from './constants';\nimport { commitRoot, diff } from './diff/index';\nimport { createElement, Fragment } from './create-element';\nimport options from './options';\nimport { slice } from './util';\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * render into\n * @param {import('./internal').PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nexport function render(vnode, parentDom, replaceNode) {\n\tif (options._root) options._root(vnode, parentDom);\n\n\t// We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\n\t// hydration mode or not by passing the `hydrate` function instead of a DOM\n\t// element..\n\tlet isHydrating = typeof replaceNode === 'function';\n\n\t// To be able to support calling `render()` multiple times on the same\n\t// DOM node, we need to obtain a reference to the previous tree. We do\n\t// this by assigning a new `_children` property to DOM nodes which points\n\t// to the last rendered tree. By default this property is not present, which\n\t// means that we are mounting a new tree for the first time.\n\tlet oldVNode = isHydrating\n\t\t? null\n\t\t: (replaceNode && replaceNode._children) || parentDom._children;\n\n\tvnode = (\n\t\t(!isHydrating && replaceNode) ||\n\t\tparentDom\n\t)._children = createElement(Fragment, null, [vnode]);\n\n\t// List of effects that need to be called after diffing.\n\tlet commitQueue = [];\n\tdiff(\n\t\tparentDom,\n\t\t// Determine the new vnode tree and store it on the DOM element on\n\t\t// our custom `_children` property.\n\t\tvnode,\n\t\toldVNode || EMPTY_OBJ,\n\t\tEMPTY_OBJ,\n\t\tparentDom.ownerSVGElement !== undefined,\n\t\t!isHydrating && replaceNode\n\t\t\t? [replaceNode]\n\t\t\t: oldVNode\n\t\t\t? null\n\t\t\t: parentDom.firstChild\n\t\t\t? slice.call(parentDom.childNodes)\n\t\t\t: null,\n\t\tcommitQueue,\n\t\t!isHydrating && replaceNode\n\t\t\t? replaceNode\n\t\t\t: oldVNode\n\t\t\t? oldVNode._dom\n\t\t\t: parentDom.firstChild,\n\t\tisHydrating\n\t);\n\n\t// Flush all queued effects\n\tcommitRoot(commitQueue, vnode);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * update\n */\nexport function hydrate(vnode, parentDom) {\n\trender(vnode, parentDom, hydrate);\n}\n", "import { assign, slice } from './util';\nimport { createVNode } from './create-element';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {import('./internal').VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<import('./internal').ComponentChildren>} rest Any additional arguments will be used as replacement children.\n * @returns {import('./internal').VNode}\n */\nexport function cloneElement(vnode, props, children) {\n\tlet normalizedProps = assign({}, vnode.props),\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\treturn createVNode(\n\t\tvnode.type,\n\t\tnormalizedProps,\n\t\tkey || vnode.key,\n\t\tref || vnode.ref,\n\t\tnull\n\t);\n}\n", "/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {import('../internal').VNode} vnode The vnode that threw\n * the error that was caught (except for unmounting when this parameter\n * is the highest parent that was being unmounted)\n */\nexport function _catchError(error, vnode) {\n\t/** @type {import('../internal').Component} */\n\tlet component, ctor, handled;\n\n\tfor (; (vnode = vnode._parent); ) {\n\t\tif ((component = vnode._component) && !component._processingException) {\n\t\t\ttry {\n\t\t\t\tctor = component.constructor;\n\n\t\t\t\tif (ctor && ctor.getDerivedStateFromError != null) {\n\t\t\t\t\tcomponent.setState(ctor.getDerivedStateFromError(error));\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\tif (component.componentDidCatch != null) {\n\t\t\t\t\tcomponent.componentDidCatch(error);\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\t// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n\t\t\t\tif (handled) {\n\t\t\t\t\treturn (component._pendingError = component);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow error;\n}\n", "import { options } from 'preact';\n\n/** @type {number} */\nlet currentIndex;\n\n/** @type {import('./internal').Component} */\nlet currentComponent;\n\n/** @type {number} */\nlet currentHook = 0;\n\n/** @type {Array<import('./internal').Component>} */\nlet afterPaintEffects = [];\n\nlet oldBeforeDiff = options._diff;\nlet oldBeforeRender = options._render;\nlet oldAfterDiff = options.diffed;\nlet oldCommit = options._commit;\nlet oldBeforeUnmount = options.unmount;\n\nconst RAF_TIMEOUT = 100;\nlet prevRaf;\n\noptions._diff = vnode => {\n\tcurrentComponent = null;\n\tif (oldBeforeDiff) oldBeforeDiff(vnode);\n};\n\noptions._render = vnode => {\n\tif (oldBeforeRender) oldBeforeRender(vnode);\n\n\tcurrentComponent = vnode._component;\n\tcurrentIndex = 0;\n\n\tconst hooks = currentComponent.__hooks;\n\tif (hooks) {\n\t\thooks._pendingEffects.forEach(invokeCleanup);\n\t\thooks._pendingEffects.forEach(invokeEffect);\n\t\thooks._pendingEffects = [];\n\t}\n};\n\noptions.diffed = vnode => {\n\tif (oldAfterDiff) oldAfterDiff(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks && c.__hooks._pendingEffects.length) {\n\t\tafterPaint(afterPaintEffects.push(c));\n\t}\n\tcurrentComponent = null;\n};\n\noptions._commit = (vnode, commitQueue) => {\n\tcommitQueue.some(component => {\n\t\ttry {\n\t\t\tcomponent._renderCallbacks.forEach(invokeCleanup);\n\t\t\tcomponent._renderCallbacks = component._renderCallbacks.filter(cb =>\n\t\t\t\tcb._value ? invokeEffect(cb) : true\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tcommitQueue.some(c => {\n\t\t\t\tif (c._renderCallbacks) c._renderCallbacks = [];\n\t\t\t});\n\t\t\tcommitQueue = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t});\n\n\tif (oldCommit) oldCommit(vnode, commitQueue);\n};\n\noptions.unmount = vnode => {\n\tif (oldBeforeUnmount) oldBeforeUnmount(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tlet hasErrored;\n\t\tc.__hooks._list.forEach(s => {\n\t\t\ttry {\n\t\t\t\tinvokeCleanup(s);\n\t\t\t} catch (e) {\n\t\t\t\thasErrored = e;\n\t\t\t}\n\t\t});\n\t\tif (hasErrored) options._catchError(hasErrored, c._vnode);\n\t}\n};\n\n/**\n * Get a hook's state from the currentComponent\n * @param {number} index The index of the hook to get\n * @param {number} type The index of the hook to get\n * @returns {any}\n */\nfunction getHookState(index, type) {\n\tif (options._hook) {\n\t\toptions._hook(currentComponent, index, currentHook || type);\n\t}\n\tcurrentHook = 0;\n\n\t// Largely inspired by:\n\t// * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\n\t// * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\n\t// Other implementations to look at:\n\t// * https://codesandbox.io/s/mnox05qp8\n\tconst hooks =\n\t\tcurrentComponent.__hooks ||\n\t\t(currentComponent.__hooks = {\n\t\t\t_list: [],\n\t\t\t_pendingEffects: []\n\t\t});\n\n\tif (index >= hooks._list.length) {\n\t\thooks._list.push({});\n\t}\n\treturn hooks._list[index];\n}\n\n/**\n * @param {import('./index').StateUpdater<any>} [initialState]\n */\nexport function useState(initialState) {\n\tcurrentHook = 1;\n\treturn useReducer(invokeOrReturn, initialState);\n}\n\n/**\n * @param {import('./index').Reducer<any, any>} reducer\n * @param {import('./index').StateUpdater<any>} initialState\n * @param {(initialState: any) => void} [init]\n * @returns {[ any, (state: any) => void ]}\n */\nexport function useReducer(reducer, initialState, init) {\n\t/** @type {import('./internal').ReducerHookState} */\n\tconst hookState = getHookState(currentIndex++, 2);\n\thookState._reducer = reducer;\n\tif (!hookState._component) {\n\t\thookState._value = [\n\t\t\t!init ? invokeOrReturn(undefined, initialState) : init(initialState),\n\n\t\t\taction => {\n\t\t\t\tconst nextValue = hookState._reducer(hookState._value[0], action);\n\t\t\t\tif (hookState._value[0] !== nextValue) {\n\t\t\t\t\thookState._value = [nextValue, hookState._value[1]];\n\t\t\t\t\thookState._component.setState({});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\thookState._component = currentComponent;\n\t}\n\n\treturn hookState._value;\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 3);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._args = args;\n\n\t\tcurrentComponent.__hooks._pendingEffects.push(state);\n\t}\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useLayoutEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 4);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._args = args;\n\n\t\tcurrentComponent._renderCallbacks.push(state);\n\t}\n}\n\nexport function useRef(initialValue) {\n\tcurrentHook = 5;\n\treturn useMemo(() => ({ current: initialValue }), []);\n}\n\n/**\n * @param {object} ref\n * @param {() => object} createHandle\n * @param {any[]} args\n */\nexport function useImperativeHandle(ref, createHandle, args) {\n\tcurrentHook = 6;\n\tuseLayoutEffect(\n\t\t() => {\n\t\t\tif (typeof ref == 'function') ref(createHandle());\n\t\t\telse if (ref) ref.current = createHandle();\n\t\t},\n\t\targs == null ? args : args.concat(ref)\n\t);\n}\n\n/**\n * @param {() => any} factory\n * @param {any[]} args\n */\nexport function useMemo(factory, args) {\n\t/** @type {import('./internal').MemoHookState} */\n\tconst state = getHookState(currentIndex++, 7);\n\tif (argsChanged(state._args, args)) {\n\t\tstate._value = factory();\n\t\tstate._args = args;\n\t\tstate._factory = factory;\n\t}\n\n\treturn state._value;\n}\n\n/**\n * @param {() => void} callback\n * @param {any[]} args\n */\nexport function useCallback(callback, args) {\n\tcurrentHook = 8;\n\treturn useMemo(() => callback, args);\n}\n\n/**\n * @param {import('./internal').PreactContext} context\n */\nexport function useContext(context) {\n\tconst provider = currentComponent.context[context._id];\n\t// We could skip this call here, but than we'd not call\n\t// `options._hook`. We need to do that in order to make\n\t// the devtools aware of this hook.\n\t/** @type {import('./internal').ContextHookState} */\n\tconst state = getHookState(currentIndex++, 9);\n\t// The devtools needs access to the context object to\n\t// be able to pull of the default value when no provider\n\t// is present in the tree.\n\tstate._context = context;\n\tif (!provider) return context._defaultValue;\n\t// This is probably not safe to convert to \"!\"\n\tif (state._value == null) {\n\t\tstate._value = true;\n\t\tprovider.sub(currentComponent);\n\t}\n\treturn provider.props.value;\n}\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\n */\nexport function useDebugValue(value, formatter) {\n\tif (options.useDebugValue) {\n\t\toptions.useDebugValue(formatter ? formatter(value) : value);\n\t}\n}\n\n/**\n * @param {(error: any) => void} cb\n */\nexport function useErrorBoundary(cb) {\n\t/** @type {import('./internal').ErrorBoundaryHookState} */\n\tconst state = getHookState(currentIndex++, 10);\n\tconst errState = useState();\n\tstate._value = cb;\n\tif (!currentComponent.componentDidCatch) {\n\t\tcurrentComponent.componentDidCatch = err => {\n\t\t\tif (state._value) state._value(err);\n\t\t\terrState[1](err);\n\t\t};\n\t}\n\treturn [\n\t\terrState[0],\n\t\t() => {\n\t\t\terrState[1](undefined);\n\t\t}\n\t];\n}\n\n/**\n * After paint effects consumer.\n */\nfunction flushAfterPaintEffects() {\n\tlet component;\n\twhile ((component = afterPaintEffects.shift())) {\n\t\tif (!component._parentDom) continue;\n\t\ttry {\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t} catch (e) {\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t}\n}\n\nlet HAS_RAF = typeof requestAnimationFrame == 'function';\n\n/**\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\n * the next browser frame.\n *\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\n * even if RAF doesn't fire (for example if the browser tab is not visible)\n *\n * @param {() => void} callback\n */\nfunction afterNextFrame(callback) {\n\tconst done = () => {\n\t\tclearTimeout(timeout);\n\t\tif (HAS_RAF) cancelAnimationFrame(raf);\n\t\tsetTimeout(callback);\n\t};\n\tconst timeout = setTimeout(done, RAF_TIMEOUT);\n\n\tlet raf;\n\tif (HAS_RAF) {\n\t\traf = requestAnimationFrame(done);\n\t}\n}\n\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\n// Perhaps this is not such a big deal.\n/**\n * Schedule afterPaintEffects flush after the browser paints\n * @param {number} newQueueLength\n */\nfunction afterPaint(newQueueLength) {\n\tif (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\n\t\tprevRaf = options.requestAnimationFrame;\n\t\t(prevRaf || afterNextFrame)(flushAfterPaintEffects);\n\t}\n}\n\n/**\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeCleanup(hook) {\n\t// A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\tlet cleanup = hook._cleanup;\n\tif (typeof cleanup == 'function') {\n\t\thook._cleanup = undefined;\n\t\tcleanup();\n\t}\n\tcurrentComponent = comp;\n}\n\n/**\n * Invoke a Hook's effect\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeEffect(hook) {\n\t// A hook call can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\thook._cleanup = hook._value();\n\tcurrentComponent = comp;\n}\n\n/**\n * @param {any[]} oldArgs\n * @param {any[]} newArgs\n */\nfunction argsChanged(oldArgs, newArgs) {\n\treturn (\n\t\t!oldArgs ||\n\t\toldArgs.length !== newArgs.length ||\n\t\tnewArgs.some((arg, index) => arg !== oldArgs[index])\n\t);\n}\n\nfunction invokeOrReturn(arg, f) {\n\treturn typeof f == 'function' ? f(arg) : f;\n}\n", "import { h, Fragment, render } from \"preact\";\nimport { useState, useEffect } from \"preact/hooks\";\n\nconst App = () => {\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setMessage(\"done!\");\n    }, 1000);\n    return () => clearTimeout(timeout);\n  }, []);\n  return <>\n    <div>Testing</div>\n    <div>{message || \"loading...\"}</div>\n  </>;\n}\n\nrender(<App />, document.getElementById(\"root\"));\n"],
  "mappings": "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",
  "names": []
}
